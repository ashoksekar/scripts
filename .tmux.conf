##############################
#  _
# | |_ _ __ ___  _   ___  __
# | __| '_ ` _ \| | | \ \/ /
# | |_| | | | | | |_| |>  <
#  \__|_| |_| |_|\__,_/_/\_\
#
#############################

# get help
## Ctrl-b ? -- list key binds.

# set-option if -s is given, then -t target is session, if not given, then -t is window.
    ## target syntax: -t session:window.pane
    ##          example: -t program:1.2

## {{{2 [ tmux ]
    ## set-option(set) [-agsuw] [-t target-session | target-window] option value
    ## -w : window
    ## -s : server, otherwise a session option.

    ## UTF8
    setw -g utf8 on
    set -g mouse-utf8 off # request mouse input as UTF-8 on UTF-8 terminals.

    ## history
    set -g history-limit 99999 # lines


    ## {{{ [ title ]
    set -g set-titles on
    #set -g set-titles-string 'tmux: [#S:#I.#P] #T'
    set -g set-titles-string 'Tmux: #S:#I.#P'
    ## }}}

    ## {{{ [ server ]
    # set -s buffer-limit number
    set -s set-clipboard on
    set -s escape-time 250 # delay for Vim more responsive, default is 500
    # set -s quiet on  #  Enable or disable the display of various informational messages
    ## }}}

    ## {{{ [ session ]
    set -g base-index 0 # Start counting at 1, default is 0.
    set -g pane-base-index 0
    ## bell
    set -g bell-action any
    set -g bell-on-alert on
    ## default shell & command
    set -g default-shell $SHELL
    set -g default-command "$SHELL --login"
    ## default terminal
    #  $ infocmp screen-256color-bce-s
    #set -g default-terminal "screen-256color" # can not display vim italic font.
    # set -g default-terminal "rxvt-256color" # can display vim italic font.
    set -g default-terminal "xterm-256color" # can not display vim italic font.
    #set -g terminal-overrides "*88col*:colors=88,*256col*:colors=256,xterm*:colors=256"
    # use $HOME/.terminfo/ and screen_terminfo="screen-256color"
    ## default working path
    #set -g default-path "$PWD" # set default working path.
    ## detach
    set -g destroy-unattached off
    set -g detach-on-destroy on
    ## visual
    set -g visual-bell off
    set -g visual-content on
    set -g visual-activity on
    # set -g visual-silence on
    ## }}}

    # identifying Activity in other windows
    setw -g monitor-activity off

    ## {{{ [ window ]
    ## monitor & acitvity
    #bind-key m setw monitor-activity   # Toggled everytime
    #bind-key a setw monitor-activity off \; command-prompt -p "Monitor content: " "setw monitor-content '%1'"
    
    setw -g monitor-content off
    # setw -g monitor-silence 30
    ## size
    # setw -g aggressive-resize on ## NOTICE !!!
    setw -g alternate-screen on
    ## automatic rename window title.
    setw -g automatic-rename off
    ## clock
    setw -g clock-mode-colour blue
    setw -g clock-mode-style 12
    ## Prevent tmux from resizing a window to greater than width or height.
    setw -g force-height 0 # 0: unlimited
    setw -g force-width 0 # 0: unlimited
    # setw -g remain-on-exit on
    # setw -g xterm-keys on
    ## }}}

    ## {{{ [ buffer ]
    # set -s buffer-limit number
    ## }}}

    ## {{{ [ miscellaneous ]
    ## Cc,Cr # cursor color
    ## Cs,Csr # cursor style
    ## }}}

    # source <path>

## }}}

## {{{2 [ ENVIRONMENT ]
    ## set-environment(setenv) [-gru] [-t target-session] name [value]
    ## -g global, -u unset, -r remove before starting a new process.
## }}}

## {{{2 [ keybinds ] Ctrl-b (prefix)

    # reload tmux config file.
    bind-key R source ~/.tmux.conf \; display "tmux config file reloaded !"

    ## bind, unbind-key [-cnr] key command [arguments]
    ## if [-n] is specified, it is not necessary to use prefix key.
    ## [-r] flag indicates the key may repeat. see the "repeat-time" option.

    ## prompt
    bind-key : command-prompt

    ## Prefix key
    unbind-key C-b
    unbind-key C-a
    set -g prefix C-a
    bind-key C-t send-prefix
    ## allow multiple commands to be entered without pressing the prefix-key again.
    set -g repeat-time 500 # default is 500
    ## Whether a key repeats may be set when it is bound using the -r flag to bind-key.
    ## Repeat is enabled for the default keys bound to the resize-pane command.
    
    set -g status-keys vi
    setw -g mode-keys vi    # in man tmux, section: WINDOWS AND PANES

    # [ Copy mode ]
    # for Copy mode: copy/paste text buffer move cursor around screen.
    # "Prefix [" to start Copy mode.
    # "Prefix ]" to start paste buffer.
    # copy current buffer to system clipboard. `$ apt-get install xclip`
    # `Prefix C-c`
    # bind-key C-c run "tmux save-buffer - | xclip -i -sel clipboard"
    # paste text from clipboard into tmux session.
    # bind-key C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

    bind-key C-a last-window

    bind-key H pipe-pane "exec cat >>$HOME/'#W-tmux.log'" \; display-message 'Started logging to $HOME/#W-tmux.log'
    bind-key h pipe-pane \; display-message 'Ended logging to $HOME/#W-tmux.log'

    # Toggle mouse on with ^B m
    bind m \
    set -g mode-mouse on \;\
    set -g mouse-resize-pane on \;\
    set -g mouse-select-pane on \;\
    set -g mouse-select-window on \;\
    display 'Mouse: ON'

    # Toggle mouse off with ^B M
    bind M \
    set -g mode-mouse off \;\
    set -g mouse-resize-pane off \;\
    set -g mouse-select-pane off \;\
    set -g mouse-select-window off \;\
    display 'Mouse: OFF'

    unbind +
    bind + \
    new-window -d -n tmux-zoom 'clear && echo TMUX ZOOM && read' \;\
    swap-pane -s tmux-zoom.0 \;\
    select-window -t tmux-zoom

    unbind -
    bind - \
    last-window \;\
    swap-pane -s tmux-zoom.0 \;\
    kill-window -t tmux-zoom

    #unbind-key M-1
    #    bind -n M-1 select-window -t :1
    #unbind-key M-2
    #    bind -n M-2 select-window -t :2
    #unbind-key M-3
    #    bind -n M-3 select-window -t :3
    #unbind-key M-4
    #    bind -n M-4 select-window -t :4
    #unbind-key M-5
    #    bind -n M-5 select-window -t :5
    #unbind-key M-6
    #    bind -n M-6 select-window -t :6
    #unbind-key M-7
    #    bind -n M-7 select-window -t :7
    #unbind-key M-8
    #    bind -n M-8 select-window -t :8
    #unbind-key M-9
    #    bind -n M-9 select-window -t :9
	
    ## Moving between windows
    unbind-key -n M-Left
    unbind-key -n M-h
    unbind-key C-h
    	bind -n M-Left select-pane -L
    unbind-key -n M-Right
    unbind-key -n M-l
    unbind-key C-l
    	bind -n M-Right select-pane -R
    unbind-key -n M-Up
    unbind-key -n M-i
    unbind-key C-i
        bind -n M-Up select-pane -U	
    unbind-key -n M-Down
    unbind-key -n M-j
    unbind-key C-j
        bind -n M-Down select-pane -D
	
    ## bind to execute a command.
    # bind / neww 'exec top'

    # TODO can not use this keys 
    ## vim-keys.conf
    # TmuxConfig=~/.tmux/
    # source ~/.tmux/vim-keys.conf

    ## similar with Function key
    ## TODO bind to Ctrl-t, Ctrl-key
    #bind -n F1 run-shell 'mpc toggle &>/dev/null'
    #bind -n F2 run-shell 'mpc'
    #bind -n F3 run-shell 'mpc prev &>/dev/null'
    #bind -n F4 run-shell 'mpc next &>/dev/null'
    #bind -n F11 run-shell 'mpc volume -5 &>/dev/null'
    #bind -n F12 run-shell 'mpc volume +5 &>/dev/null'

    # bind-key b set-option status
    # bind-key / command-prompt "split-window 'exec man %%'"
    # bind-key S command-prompt "new-window -n %1 'ssh %1'
    unbind-key '"'
    unbind-key %
    bind | split-window -h -c '#{pane_current_path}'
    bind _ split-window -v -c '#{pane_current_path}'

    # move to next window in session with bell, activity or content alert.
    bind-key u next-window -a
## }}}

## {{{2 [ layout ] windows, pane, status line, names
    # set -g display-time 4000
    # set -g lock-after-time 1800

    ## {{{ [ pane ]
    bind-key 'C-w' command-prompt -p "Save to File: " "capture-pane \; save-buffer '%1'"

    set -g display-panes-time 4000
    set -g display-panes-colour colour166 #orange
    set -g display-panes-active-colour colour33 #blue
    set -g pane-border-fg colour240 #base02
    set -g pane-border-bg colour233  #base01
    set -g pane-active-border-fg colour150 #base01
    set -g pane-active-border-bg colour235
    setw -g other-pane-height 40
    setw -g other-pane-width 50
    setw -g synchronize-panes off

    # clock
    setw -g clock-mode-colour colour64 #green
    ## }}}

    ## {{{ [ layout mode ]
    #setw mode-attr bold
    # setw mode-fg blue
    # setw mode-bg black
        # in other method, when on, you can use "Shift-mouse" to select.
    # select-layout main-vertical # FIXME
    setw -g main-pane-height 50
    setw -g main-pane-width 81
    ## }}}

    ## {{{ [ mouse ]
    setw -g mode-mouse off # off to let mouse to select text instead of enter copy mode.
    set -g mouse-resize-pane off
    set -g mouse-select-pane off
    set -g mouse-select-window off
    ## }}}
## }}}

## {{{2 [ status line ]
    ## attr: bold, bright, underscore, dim, blink, reverse, hidden or italics.
    ## color: black, red, green, yellow, blue, magenta, cyan, white, 
    ##          color0 to color255 from the 256-colour set.
    ##          default, or a hexadecimal RGB string such as '#ffffff'.
    ## "I' == current window index
    ## 'H' == Hostname
    ## 'F' == current window flag
    ## 'P' == current pane index
    ## 'S' == Session name
    ## 'T' == current window title
    ## 'W' == current window name
    ## '#' == a literal "#"

    ## {{{ [ status ]
    set -g status on
    set -g status-utf8 on
    set -g status-bg colour235
    # set -g status-fg colour255
    # set -g status-attr default
    set -g status-justify centre # position of the window list component of the status line.
    #set -g status-interval 1
    set -g status-left-length 60
    set -g status-right-length 90
    #    set -g status-left '#[fg=colour016,bg=colour255,bold] #S #[fg=colour255,bg=colour247,nobold]⮀#[fg=colour016,bg=colour247] #H #[fg=colour247,bg=colour240,bold]⮀#[default] '
    set -g status-left '#[fg=colour016,bg=colour255,bold] #S #[fg=colour016,bg=colour247,nobold] #H #[default] '
    set -g status-right '#[fg=colour248,bold]#[fg=colour016,bg=colour248,nobold] %a | %d %b | %H:%M #[default]'
    # TODO add username set @
    #before -g status-left '#[fg=red,bold] ??? #[fg=red]{#[fg=white]@#H#[fg=red]} #[fg=cyan]#([ -n "`mpcstatus|grep playing`" ] && echo "???") #[fg=green,bold]?? '
    # here date,time: reference command "date"
    # #[fg=blue,bold]#(echo "???/???") #[fg=cyan]fuck #[fg=red,bold]??? 
    # TODO add loadavg
    #set -g status-right '{#P:#S} #[fg=white,dim]#(uptime|cut -d"," -f3,4,5|cut -d ":" -f2)#[fg=red][#[fg=green,bold]%l:%M %p #[fg=magenta]%a %m-%d#[fg=red] ] #[fg=red,bold]??? '
    ## }}}

    ## {{{ [ window status ]
    setw -g window-status-fg default
    setw -g window-status-bg default
    setw -g window-status-attr dim
    setw -g window-status-format "#[fg=black]│#[fg=green] #I. #[fg=white]#W #[fg=red]#F#[fg=black]│#[default]"
    setw -g window-status-current-fg black
    setw -g window-status-current-bg colour006
    setw -g window-status-current-attr bright
    #setw -g window-status-current-format "#[fg=green] #I.#P #[fg=blue]#W #[fg=cyan]#F#[fg=black] #[default]"
    setw -g window-status-current-format "#I.#P #W #[fg=red]#F#[fg=black] #[default]"
    setw -g window-status-bell-fg black
    setw -g window-status-bell-bg red
    setw -g window-status-bell-attr bright
    setw -g window-status-content-fg default
    setw -g window-status-content-bg default
    setw -g window-status-content-attr dim
    setw -g window-status-activity-fg default
    setw -g window-status-activity-bg default
    setw -g window-status-activity-attr bold
        # #F: flag symbol
           # Symbol    Meaning
           # *         Denotes the current window.
           # -         Marks the last window (previously selected).
           # #         Window is monitored and activity has been detected.
           # !         A bell has occurred in the window.
           # +         Window is monitored for content and it has appeared.
           # ~         The window has been silent for the monitor-silence interval.
    # setw -g word-separators ' -_@'
    ## }}}

    ## {{{ [ message ]
    set -g message-fg white
    set -g message-bg black
    set -g message-attr bright
    set -g message-limit 50 # default is 20
    set -g message-command-bg black
    set -g message-command-fg cyan
    ## }}}

    ## {{{ [ prompt & command ]
    ## command-prompt [-I inputs] [-p prompts] [-t target-client] [template]
    ## confirm-before [-p prompt] [-t target-client] command
    ## display-message [-p] [-c target-client] [-t target-pane] [message]
    ## }}}

## }}}

## {{{2 [ sessions ] initialization, detached & reattached
    ## new-session(new) [-d] [-n window-name] [-s session-name] [-t target-session] [-x width] [-y height] [shell-command]
    #new  -s SessionName -n WindowName Command

## }}}

## {{{2 [ Tips & Tricks ]
    ## browsing URL's
    ## To browse URL's inside tmux you must have urlview installed and configured: 
    bind-key u capture-pane \; save-buffer /tmp/tmux-buffer \; run-shell "$TERMINAL -e 'cat/tmp/tmux-buffer | urlview'"

    ## CLIPBOARD selection integration
    ## Requires prefix key before the command key
    ## Copy tmux paste buffer to CLIPBOARD
     bind-key C-c run "tmux show-buffer | xclip -i -selection clipboard"
    ## Copy CLIPBOARD to tmux paste buffer and paste tmux paste buffer
     bind-key C-v run "tmux set-buffer \"$(xclip -o -selection clipboard)\"; tmux paste-buffer"
## }}}

## {{{2 [ FAQ ]
## http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/FAQ
    ## tmux freezes my terminal when I attach to a session
    ## Some consoles really really don't like attempts to set the window title.
    # set -g set-titles off

    ## Why is C-b the prefix key? How do I change it?
    ## The default key is C-b because the prototype of tmux was originally developed
    ## inside screen and C-b was chosen not to clash with the screen meta key.
    # set -g prefix C-a
    # unbind-key C-b
    # bind-key C-a send-prefix

    ## How do I use UTF-8?
    ## When running tmux in a UTF-8 capable terminal, UTF-8 must be turned on in tmux;
    ## as of release 0.9, tmux attempts to autodetect a UTF-8-capable terminal by
    ## checking the LC_ALL, LC_CTYPE and LANG environment variables.
    # $ tmux -u new
    ## Since the 1.0 release, tmux will turn on UTF-8 related options automatically
    ## (ie status-utf8, and utf8) if the above conditions are met.

    ## How do I use a 256 colour terminal?
    ## Provided the underlying terminal supports 256 colours, it is usually sufficient
    ## to add the following to ~/.tmux.conf:
    # set -g default-terminal "screen-256color"
    ## Note that some platforms do not support "screen-256color" ("infocmp
    ## screen-256color" will return an error) - in this case see the next entry in
    ## this FAQ.

    ## vim or $otherprogram doesn't display 256 colours. What's up?

    ## How do I make Ctrl-PgUp and Ctrl-PgDn work in vim?
    ## tmux supports passing through ctrl (and where supported by the client terminal,
    ## alt and shift) modifiers to function keys using xterm(1)-style key sequences.
    ## This may be enabled per window, or globally with the tmux command:
    # setw -g xterm-keys on
    ## Because the TERM variable inside tmux must be set to "screen", vim will not
    ## automatically detect these keys are available; however, the appropriate key
    ## sequences can be overridden in .vimrc using the following:
    # if &term == "screen"
    #     set t_kN=^[[6;*~
    #     set t_kP=^[[5;*~
	# endif
    ## And similarly for any other keys for which modifiers are desired.
    ## Please note that the "xterm-keys" setting may affect other programs, in the
    ## same way as running them in a standard xterm;
    ## vim users may also want to set the "ttyfast" option inside tmux.

    ##  What is the proper way to escape characters with #(command)?

    ## tmux uses too much CPU. What do I do?
    ## Automatic window renaming may use a lot of CPU, particularly on slow computers:
    ## if this is a problem, turn it off with "setw -g automatic-rename off".

    ## What is the best way to display the load average? Why no #L?
    # uptime|awk '{split(substr($0, index($0, "load")), a, ":"); print a[2]}'

    ## How do I attach the same session to multiple clients but with a different
    ## current window, like screen -x?
    ## One or more of the windows can be linked into multiple sessions manually with
    ## link-window, or a grouped session with all the windows can be created with
    ## new-session -t.

    ## How can I blank the tmux window?
    ## GNU screen has a feature whereby it will blank the screen after a period of
    ## inactivity. To do the same thing in tmux, use the lock-command setting, for
    ## example (with GNU bash):
    # set -g lock-command 'tput civis && read -s -n1'
    ## This will remove the cursor and tell the shell to quit once a key has been
    ## pressed. For zsh, use "read -s -k1".
    ## In addition, it's possible to have both blanking and locking (for instance via
    ## lock(1) or vlock(1)) by using the following:
    # bind x set lock-command '/usr/bin/vlock' \; lock-client \; set lock-command 'tput civis && read -s -n1'

    ## How can I open a new window in the same directory as the current window?

    ## tmux doesn't start with "daemon failed"

    ## vim displays reverse video instead of italics, while less displays italics
    ## (or just regular text) instead of reverse. What's wrong?
    # if [ -n "$TMUX" ]; then
    #   export TERM=screen-256color
## }}}

## {{{ [ options ]
    ## -t : target-client, target-session, target-window, target-pane.
    ## XXX if-shell(if) shell-command command
    ## XXX run-shell(run) shell-command
## }}}

# tmux-powerline {{{
# https://github.com/erikw/tmux-powerline

# set-option -g status on
# set-option -g status-interval 2
# set-option -g status-utf8 on
# set-option -g status-justify "centre"
# set-option -g status-left-length 60
# set-option -g status-right-length 90
# set-option -g status-left "#(~/.tmux-powerline/status-left.sh)"
# set-option -g status-right "#(~/.tmux-powerline/status-right.sh)"

# # tmux-colors-solarized
# # https://github.com/seebi/tmux-colors-solarized
# source ~/.tmux-colors-solarized/tmuxcolors.conf

# set in ~/.bashrc or source .bash_ps1
# PS1="$PS1"'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#I_#P") "$PWD")'
# }}}

# Ruby {{{
    # rvm
# }}}


if-shell "[[ -e ~/.tmux/local.conf ]]" \
	"source-file ~/.tmux/local.conf"

# vim:ft=tmux:fdm=marker
